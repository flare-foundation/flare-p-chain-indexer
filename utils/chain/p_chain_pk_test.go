package chain

import (
	"encoding/hex"
	"testing"

	"github.com/ava-labs/avalanchego/utils/formatting/address"
)

func TestPublicKeysFromProposalBlock(t *testing.T) {
	txBytes, err := hex.DecodeString
	if err != nil {
		t.Fatal(err)
	}

	address := "costwo1n5vvqn7g05sxzaes8xtvr5mx6m95q96jesrg5g"
	addressBytes, err := parseAddress(address)
	if err != nil {
		t.Fatal(err)
	}

	pk, err := PublicKeyFromPChainBlock("2JXfmg5DmADsQsSu5Kb1xRa8zJTkPBVM4FtKembYCj8KVWyHU7", addressBytes, 0, txBytes)
	if err != nil {
		t.Fatal(err)
	}

	ethAddress, err := PublicKeyToEthAddress(pk)
	if err != nil {
		t.Fatal(err)
	}
	if ethAddress.Hex() != "0x91401C111C3adD819e73bc8C109A2c9e5BF502d9" {
		t.Fatal("Wrong address")
	}
}

func TestPublicKeysFromStandardBlockEth(t *testing.T) {
	txBytes, err := hex.DecodeString
	if err != nil {
		t.Fatal(err)
	}

	address := "costwo1ydmq29qfjjrz767k7w3hgrhx7krthkhlw7rqk8"
	addressBytes, err := parseAddress(address)
	if err != nil {
		t.Fatal(err)
	}

	pk, err := PublicKeyFromPChainBlock("pehEi5CRYEoiyofEsvmajtD7AJ1A1fNQs4dZcqKyhfcSd9PxU", addressBytes, 3, txBytes)
	if err != nil {
		t.Fatal(err)
	}

	ethAddress, err := PublicKeyToEthAddress(pk)
	if err != nil {
		t.Fatal(err)
	}
	if ethAddress.Hex() != "0x8ab7028638854AE968EF5174996C17D010Af4bD5" {
		t.Fatalf("Wrong address")
	}
}

func TestPublicKeysFromStandardBlockAvalanche(t *testing.T) {
	txBytes, err := hex.DecodeString
	if err != nil {
		t.Fatal(err)
	}

	address := "costwo12jqe7uvzddwktct3cd53m3ggce5s7xlxf2zklw"
	addressBytes, err := parseAddress(address)
	if err != nil {
		t.Fatal(err)
	}

	pk, err := PublicKeyFromPChainBlock("UAHoUQRCyrguiD2L5qaUyuTXEu8WZCQKEietGbno5AnEoS1Bu", addressBytes, 0, txBytes)
	if err != nil {
		t.Fatal(err)
	}

	ethAddress, err := PublicKeyToEthAddress(pk)
	if err != nil {
		t.Fatal(err)
	}
	if ethAddress.Hex() != "0x9327a86e5942da03Bd397576546ABBe7eAA4bd03" {
		t.Fatalf("Wrong address")
	}
}

func parseAddress(addr string) ([20]byte, error) {
	address20 := [20]byte{}
	_, address, err := address.ParseBech32(addr)
	if err != nil {
		return address20, err
	}
	copy(address20[:], address)
	return address20, nil
}
