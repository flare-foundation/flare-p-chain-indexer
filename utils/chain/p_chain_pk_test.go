package chain

import (
	"encoding/hex"
	"testing"
)

func TestPublicKeysFromProposalBlock(t *testing.T) {
	hex, err := hex.DecodeString
	if err != nil {
		t.Fatal(err)
	}

	pks, err := PublicKeysFromPChainBlock("2JXfmg5DmADsQsSu5Kb1xRa8zJTkPBVM4FtKembYCj8KVWyHU7", hex)
	if err != nil {
		t.Fatal(err)
	}

	if len(pks) != 1 {
		t.Fatal("Expected 1 input")
	}
	if len(pks[0]) != 1 {
		t.Fatal("Expected one pk")
	}
	ethAddress, err := PublicKeyToEthAddress(pks[0][0])
	if err != nil {
		t.Fatal(err)
	}
	if ethAddress.Hex() != "0x91401C111C3adD819e73bc8C109A2c9e5BF502d9" {
		t.Fatal("Wrong address")
	}
}

func TestPublicKeysFromStandardBlock(t *testing.T) {
	hex, err := hex.DecodeString
	if err != nil {
		t.Fatal(err)
	}

	pks, err := PublicKeysFromPChainBlock("pehEi5CRYEoiyofEsvmajtD7AJ1A1fNQs4dZcqKyhfcSd9PxU", hex)
	if err != nil {
		t.Fatal(err)
	}

	if len(pks) != 5 {
		t.Fatal("Expected 5 inputs")
	}
	for i, pk := range pks {
		if len(pk) != 1 {
			t.Fatalf("Expected one pk for input %d", i)
		}
		ethAddress, err := PublicKeyToEthAddress(pk[0])
		if err != nil {
			t.Fatal(err)
		}
		if ethAddress.Hex() != "0xfbD1Cd44714e241dAF3FC72f76EcAf3d186FC24C" {
			t.Fatalf("Wrong address for input %d", i)
		}
	}

}
